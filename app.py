{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: Do not use the development server in a production environment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Restarting with stat\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fcheb\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:2969: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func, inspect\n",
    "\n",
    "from flask import Flask, jsonify\n",
    "import datetime as dt\n",
    "\n",
    "\n",
    "# Relative Date\n",
    "\n",
    "\n",
    "#################################################\n",
    "# Database Setup\n",
    "#################################################\n",
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\") \n",
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)\n",
    "\n",
    "# Save reference to the table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station\n",
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "\n",
    "#################################################\n",
    "# Flask Setup\n",
    "#################################################\n",
    "app = Flask(__name__)\n",
    "\n",
    "\n",
    "#################################################\n",
    "# Flask Routes\n",
    "\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    \"\"\"List all available api routes.\"\"\"\n",
    "    return (\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation<br/>\"\n",
    "        f\"/api/v1.0/stations<br/>\"\n",
    "        f\"/api/v1.0/tobs<br/>\"\n",
    "        f\"/api/v1.0/start<br/>\"\n",
    "        f\"/api/v1.0/start/end<br/>\"   \n",
    "    )\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():\n",
    "    \"\"\"Return a list of precipitations from last year\"\"\"\n",
    "    # Design a query to retrieve the last 12 months of precipitation \n",
    "    results = session.query(Measurement.date, Measurement.prcp).filter(Measurement.date >= prev_year).all()\n",
    "    last_twelve_months_date = dt.date(2017,8,23) - dt.timedelta(days = 365)\n",
    "    \n",
    "    # Convert list of tuples into normal list\n",
    "    rain_dict = dict(results)\n",
    "\n",
    "    return jsonify(rain_dict)\n",
    "\n",
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations(): \n",
    "    \"\"\"Return a list of stations from the dataset.\"\"\"\n",
    "    \n",
    "    # Query stations\n",
    "    results_stations =  session.query(Station.id).count()\n",
    "    \n",
    "    # Convert list of tuples into normal list\n",
    "    stations_list = list(np.ravel(results_stations))\n",
    "\n",
    "    return jsonify(stations_list)\n",
    "\n",
    "@app.route(\"/api/v1.0/tobs\")\n",
    "def tobs(): \n",
    "    \"\"\"Return a list of Temperature Observations (tobs) for the previous year.\"\"\"\n",
    "    # Query tobs\n",
    "    lowest_temperature= session.query(func.min(Measurement.tobs),func.max(Measurement.tobs) , func.avg(Measurement.tobs)).filter(Measurement.station==most_active_station).all()\n",
    "    \n",
    "    # Calculate the date 1 year ago from database\n",
    "    last_twelve_months_date = dt.date(2017,8,23) - dt.timedelta(days = 365)\n",
    "\n",
    "    # Convert list of tuples into normal list\n",
    "    tobs_list = list(np.ravel(lowest_temperature))\n",
    "\n",
    "    return jsonify(tobs_list)\n",
    "\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/<start>\")\n",
    "def start(start=None):\n",
    "    \"\"\"Return a JSON list of tmin, tmax, tavg for the dates greater than or equal to the date provided\"\"\"\n",
    "    from_start = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).filter(Measurement.date >= start_date)\n",
    "    \n",
    "    # Convert list of tuples into normal list\n",
    "    from_start_list=list(np.ravel(from_start))\n",
    "                     \n",
    "    return jsonify(from_start_list)\n",
    "\n",
    "    \n",
    "\n",
    "@app.route(\"/api/v1.0/<start>/<end>\")\n",
    "def start_end(start=None, end=None):\n",
    "    \"\"\"Return a JSON list of tmin, tmax, tavg for the dates in range of start date and end date inclusive\"\"\"\n",
    "    \n",
    "    between_dates = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).filter(Measurement.date >= start).filter(Measurement.date <= end).all()\n",
    " \n",
    "    # Convert list of tuples into normal list    \n",
    "    between_dates_list=list(np.ravel(between_dates))\n",
    "    \n",
    "    return jsonify(between_dates_list)\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
